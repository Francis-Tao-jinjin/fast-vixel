/// <reference types="node" />
import { mat4, vec3, quat } from 'gl-matrix';
import { EventEmitter } from 'events';
export declare const CameraEvent: {
    cameraMoveEnd: string;
    cameraMoveBegin: string;
};
export declare class Camera extends EventEmitter {
    viewportWidth: number;
    viewportHeight: number;
    view: mat4;
    fixedView: mat4;
    projection: mat4;
    viewProjection: mat4;
    invView: mat4;
    invProjection: mat4;
    invViewProjection: mat4;
    eye: vec3;
    rotation: quat;
    target: vec3;
    up: Float32Array;
    fovY: number;
    zNear: number;
    zFar: number;
    gamma: number;
    canvas: HTMLCanvasElement;
    private prevX;
    private prevY;
    private metaDown;
    private startRotate;
    private keyThetaRotate;
    private keyPhiRotate;
    private keyZoomIn;
    private keyZoomOut;
    private lastScrollTime;
    theta: number;
    phi: number;
    distance: number;
    dtheta: number;
    dphi: number;
    ddistance: number;
    minDistance: number;
    maxDistance: number;
    constructor(canvas: HTMLCanvasElement);
    isRotating(): boolean;
    setPosition(dimension: any): void;
    private calcProjection;
    private calcView;
    private recalc;
    reset(): void;
    updateCamera(): void;
    private _onMouseDown;
    private _onTouchStart;
    private _onTouchMove;
    private _onTouchEnd;
    private _onContextMenu;
    private _onMouseMove;
    private _onMouseUp;
    damp(x: any): number;
    clamp(x: any, lo: any, hi: any): number;
    attachEventListener(): void;
    releaseEventListener(): void;
}
